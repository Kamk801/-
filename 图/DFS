#include<stdlib.h>
#include<stdio.h>
//深度优先
//邻阶矩阵
#define Maxsize 100
typedef struct {
	char vertex[Maxsize];
	int  Edge[Maxsize][Maxsize];
	int vernum, edgnum;
}MGraph;

//顶点x的第一个邻接点
int FirstNeighbour(MGraph G, int x) {
	if (G.vernum == 1) {
		return -1;
	}
	for (int i = 1; i <= G.vernum; i++) {
		if (G.Edge[x, i]) {
			return i;
		}
	}
}
//顶点x的第一个邻接点y的下一个顶点号
int NextNeighbour(MGraph G,int x,int y) {
	if (y == G.vernum) {
		return -1;
	}
	for (int i = y+1; i <= G.vernum; i++) {
		if (G.Edge[x, i]) {
			return i;
		}
	}
}
void visit(int x){}
//DFS
bool visited[Maxsize];
void DFSTree(MGraph G) {
	for (int i = 1; i <= G.vernum; i++) {
		visited[i] = 0;
	}
	for (int j = 1; j <= G.vernum; j++) {
		if (!visited[j]) {
			DFS(G, j);
		}
	}
}
void DFS(MGraph G, int x) {
	visit(x);
	visited[x] = 1;
	for (int m = FirstNeighbour(G, x); m > 0; m = NextNeighbour(G, x, m)) {
		if (!visited[m]) {
			DFS(G, m);
		}
	}
}
