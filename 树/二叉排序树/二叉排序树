//二叉排序树
#include<stdlib.h>
typedef struct {
	int data;
	BSTNode* lchild;
	BSTNode* rchild;
}BSTNode,*BSTree;

//二叉排序树查找值为key的结点
BSTNode* search(BSTree T,int key) {
	while (T != NULL && T->data != key) {
		if (T->data < key) T = T->rchild;
		else T = T->lchild;
	}
	return T;
}

//递归实现
BSTNode* research(BSTree T, int key) {
	if (T == NULL) {
		return NULL;
	}
	else if (T->data == key) return T;
	else if (T->data < key)  return research(T->rchild, key);
	else                     return research(T->lchild, key);
}
//二叉排序树插入
int  Insert(BSTree& T, int k) {
	if (T == NULL) {
		BSTNode* p = (BSTNode*)malloc(sizeof(BSTNode));
		p->data = k;
		p->lchild = p->rchild = NULL;
		T = p;
		return 1;
	}
	else if (T->data < k)  return Insert(T->rchild, k);
	else if (T->data == k)  return 0;
	else   return  Insert(T->lchild, k);
}
//二叉树的构造
void CreateBST(BSTree &T, int str[],int n) {
	T = NULL;
	for (int i = 0; i < n; i++) {
		Insert(T, str[i]);
	}
}
